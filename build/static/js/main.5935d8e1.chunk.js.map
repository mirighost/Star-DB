{"version":3,"sources":["components/error-indicator/error.png","components/header/index.js","components/header/header.js","services/swapi-service.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/error-boundary/index.js","components/error-boundary/error-boundary.js","components/swapi-service-context/swapi-service-context.js","components/item-details/item-details.js","components/item-details/index.js","components/hoc-helper/with-data.js","components/hoc-helper/with-swapi-service.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-components/item-lists.js","components/pages/people-page.js","components/pages/planet-page.js","components/pages/starship-page.js","components/pages/secret-page.js","components/pages/login-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","Header","className","to","SwapiService","_apiBase","_imageBase","getResource","url","a","fetch","res","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","_extractId","item","match","getPersonImage","getStarshipImage","getPlanetImage","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","Spinner","ErrorIndicator","src","icon","alt","RandomPlanet","swapiService","state","loading","onPlanetLoaded","setState","error","onError","err","updatePlanet","Math","floor","random","then","catch","updateInterval","this","props","interval","setInterval","clearInterval","errorMessage","spinner","content","Component","defaultProps","PlanetView","Fragment","ErrorBoundary","hasError","children","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","Record","field","label","ItemDetails","image","updateItem","prevProps","itemId","getData","getImageUrl","Children","child","cloneElement","withData","View","data","update","withSwapiService","mapMethodsToProps","Wrapped","serviceProps","ItemList","onItemSelected","renderLabel","items","key","onClick","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","withRouter","history","push","SecretPage","isLoggedIn","LoginPage","onLogin","App","value","path","render","exact","component","PeoplePage","PlanetsPage","StarshipsPage","params","ReactDOM","document","getElementById"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,8SCE5BC,G,MCGA,WACX,OACI,yBAAKC,UAAU,iBACX,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,YAIJ,wBAAID,UAAU,UACV,4BACI,kBAAC,IAAD,CAAMC,GAAG,YAAT,WAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,aAAT,YAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,eAAT,cAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,WAAT,e,wBC3BCC,E,iDAEjBC,SAAW,uB,KACXC,WAAa,8C,KAEbC,Y,uCAAc,WAAOC,GAAP,eAAAC,EAAA,sEACQC,MAAM,GAAD,OAAI,EAAKL,UAAT,OAAoBG,IADjC,WACJG,EADI,QAGDC,GAHC,sBAIA,IAAIC,MAAM,2BAAoBL,GAApB,qBACIG,EAAIG,SALlB,uBAOGH,EAAII,OAPP,mF,2DAWdC,a,sBAAe,4BAAAP,EAAA,sEACO,EAAKF,YAAL,YADP,cACLI,EADK,yBAEJA,EAAIM,QACNC,IAAI,EAAKC,mBAHH,2C,KAMfC,U,uCAAY,WAAOC,GAAP,eAAAZ,EAAA,sEACa,EAAKF,YAAL,kBAA4Bc,EAA5B,MADb,cACFC,EADE,yBAED,EAAKH,iBAAiBG,IAFrB,2C,2DAMZC,c,sBAAgB,4BAAAd,EAAA,sEACM,EAAKF,YAAL,aADN,cACNI,EADM,yBAELA,EAAIM,QACNC,IAAI,EAAKM,mBAHF,2C,KAMhBC,U,uCAAY,WAAOJ,GAAP,eAAAZ,EAAA,sEACa,EAAKF,YAAL,mBAA6Bc,EAA7B,MADb,cACFK,EADE,yBAED,EAAKF,iBAAiBE,IAFrB,2C,2DAMZC,gB,sBAAkB,4BAAAlB,EAAA,sEACI,EAAKF,YAAL,eADJ,cACRI,EADQ,yBAEPA,EAAIM,QACNC,IAAI,EAAKU,qBAHA,2C,KAMlBC,Y,uCAAc,WAAOR,GAAP,eAAAZ,EAAA,sEACa,EAAKF,YAAL,qBAA+Bc,EAA/B,MADb,cACJS,EADI,yBAEH,EAAKF,mBAAmBE,IAFrB,2C,2DAMdC,WAAa,SAACC,GAEV,OAAOA,EAAKxB,IAAIyB,MADC,iBACe,I,KAIpCC,eAAiB,YAAa,IAAVb,EAAS,EAATA,GAChB,MAAM,GAAN,OAAU,EAAKf,WAAf,uBAAwCe,EAAxC,S,KAEJc,iBAAmB,YAAa,IAAVd,EAAS,EAATA,GAClB,MAAM,GAAN,OAAU,EAAKf,WAAf,sBAAuCe,EAAvC,S,KAEJe,eAAiB,YAAa,IAAVf,EAAS,EAATA,GAChB,MAAM,GAAN,OAAU,EAAKf,WAAf,oBAAqCe,EAArC,S,KAGJG,iBAAmB,SAACE,GAChB,MAAO,CACHL,GAAI,EAAKU,WAAWL,GACpBW,KAAMX,EAAOW,KACbC,WAAYZ,EAAOY,WACnBC,eAAgBb,EAAOc,gBACvBC,SAAUf,EAAOe,W,KAIzBb,mBAAqB,SAACE,GAClB,MAAO,CACHT,GAAI,EAAKU,WAAWD,GACpBO,KAAMP,EAASO,KACfK,MAAOZ,EAASY,MAChBC,aAAcb,EAASa,aACvBC,cAAed,EAASe,gBACxBC,OAAQhB,EAASgB,OACjBC,KAAMjB,EAASiB,KACfC,WAAYlB,EAASkB,WACrBC,cAAenB,EAASoB,iB,KAIhC/B,iBAAmB,SAACG,GAChB,MAAO,CACHD,GAAI,EAAKU,WAAWT,GACpBe,KAAMf,EAAOe,KACbc,OAAQ7B,EAAO6B,OACfC,UAAW9B,EAAO+B,WAClBC,SAAUhC,EAAOiC,aChGdC,G,MCCC,WACZ,OACI,yBAAKtD,UAAU,kDAAiD,yBAAKA,UAAU,mBAC3E,8BAAW,8BAAW,kC,yBCJnBuD,ECEQ,WACnB,OACI,yBAAKvD,UAAU,mBACX,yBAAKwD,IAAKC,IAAMC,IAAI,uBAAuB1D,UAAU,UACrD,0BAAMA,UAAU,QAAhB,SACA,mEAGA,0ECJS2D,G,iNAUjBC,aAAe,IAAI1D,E,EAEnB2D,MAAQ,CACJrC,OAAQ,GACRsC,SAAS,G,EAebC,eAAiB,SAACvC,GACd,EAAKwC,SAAS,CACVxC,SACAsC,SAAS,EACTG,OAAO,K,EAIfC,QAAU,SAACC,GACP,EAAKH,SAAS,CACVC,OAAO,EACPH,SAAS,K,EAIjBM,aAAe,WACX,IAAMjD,EAAKkD,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAC5C,EAAKX,aACArC,UAAUJ,GACVqD,KAAK,EAAKT,gBACVU,MAAM,EAAKP,U,mFAhCC,IAETQ,EAAmBC,KAAKC,MAAxBF,eAERC,KAAKP,eACLO,KAAKE,SAAWC,YAAYH,KAAKP,aAAcM,K,6CAI/CK,cAAcJ,KAAKE,Y,+BA0Bb,IAAD,EAC8BF,KAAKd,MAAhCrC,EADH,EACGA,OAAQsC,EADX,EACWA,QAASG,EADpB,EACoBA,MAGnBe,EAAef,EAAQ,kBAAC,EAAD,MAAqB,KAC5CgB,EAAUnB,EAAU,kBAAC,EAAD,MAAc,KAGlCoB,IADYpB,GAAWG,GACH,kBAAC,EAAD,CAAYzC,OAAQA,IAAa,KAE3D,OACI,yBAAKxB,UAAU,mCACVgF,EACAC,EACAC,O,GAlEyBC,cAArBxB,EAEVyB,aAAe,CAClBV,eAAgB,KAqExB,IAAMW,EAAa,SAAC,GAAgB,IAAd7D,EAAa,EAAbA,OAEVL,EAEJK,EAFIL,GAAIgB,EAERX,EAFQW,KAAMC,EAEdZ,EAFcY,WACdC,EACAb,EADAa,eAAgBE,EAChBf,EADgBe,SAGpB,OACI,kBAAC,IAAM+C,SAAP,KACI,yBAAKtF,UAAU,eACXwD,IAAG,8DAAyDrC,EAAzD,QAAmEuC,IAAI,QAC9E,6BACI,4BAAKvB,GACL,wBAAInC,UAAU,+BACV,wBAAIA,UAAU,mBACV,0BAAMA,UAAU,QAAhB,eACA,8BAAOoC,IAEX,wBAAIpC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,oBACA,8BAAOqC,IAEX,wBAAIrC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,aACA,8BAAOuC,QCrGhBoB,ICAA4B,E,2MCEX1B,MAAQ,CACJ2B,UAAU,G,mFAIVb,KAAKX,SAAS,CACVwB,UAAU,M,+BAKd,OAAIb,KAAKd,MAAM2B,SACJ,kBAAC,EAAD,MAGJb,KAAKC,MAAMa,a,GAhBiBN,a,ECEvCO,IAAMC,gBAFIC,E,EAAVC,SACUC,E,EAAVC,SCAEC,G,MAAS,SAAC,GAA4B,IAA1BlE,EAAyB,EAAzBA,KAAMmE,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC3B,OACI,wBAAIlG,UAAU,mBACV,0BAAMA,UAAU,QAAQkG,GACxB,8BAAOpE,EAAKmE,OCNTE,E,2MDiBXtC,MAAQ,CACJ/B,KAAM,KACNsE,MAAO,M,mFAIPzB,KAAK0B,e,yCAGUC,GACX3B,KAAKC,MAAM2B,SAAWD,EAAUC,QAChC5B,KAAK0B,e,mCAIC,IAAD,SACgC1B,KAAKC,MAAtC2B,EADC,EACDA,OAAQC,EADP,EACOA,QAASC,EADhB,EACgBA,YACpBF,GAILC,EAAQD,GACH/B,MAAK,SAAC1C,GACH,EAAKkC,SAAS,CACVlC,OACAsE,MAAOK,EAAY3E,U,+BAKzB,IAAD,EACmB6C,KAAKd,MAArB/B,EADH,EACGA,KAAMsE,EADT,EACSA,MACd,IAAKtE,EACD,OAAO,0BAAM9B,UAAU,QAAhB,6BAHN,IAMGmC,EAASwC,KAAKd,MAAM/B,KAApBK,KAER,OACI,yBAAKnC,UAAU,qBACX,yBAAKA,UAAU,aACXwD,IAAK4C,EACL1C,IAAI,SAER,yBAAK1D,UAAU,aACX,4BAAKmC,EAAL,IAAYwC,KAAKC,MAAM2B,QACvB,wBAAIvG,UAAU,+BAEN0F,IAAMgB,SAAS1F,IAAI2D,KAAKC,MAAMa,UAAU,SAACkB,GACrC,OAAOjB,IAAMkB,aAAaD,EAAO,CAAE7E,mB,GAnD1BqD,aE4C1B0B,EAzDE,SAACC,GACd,kNAEIjD,MAAQ,CACJkD,KAAM,KACNjD,SAAS,EACTG,OAAO,GALf,kFAQuBqC,GACX3B,KAAKC,MAAM4B,UAAYF,EAAUE,SACjC7B,KAAKqC,WAVjB,0CAeQrC,KAAKqC,WAfb,+BAkBc,IAAD,OACLrC,KAAKX,SAAS,CACVF,SAAS,EACTG,OAAO,IAGXU,KAAKC,MAAM4B,UACNhC,MAAK,SAACuC,GACH,EAAK/C,SAAS,CACV+C,OACAjD,SAAS,OAGhBW,OAAM,WACH,EAAKT,SAAS,CACVC,OAAO,EACPH,SAAS,SAlC7B,+BAuCc,IAAD,EAE4Ba,KAAKd,MAA9BkD,EAFH,EAEGA,KAAMjD,EAFT,EAESA,QAASG,EAFlB,EAEkBA,MAEvB,OAAIH,EACO,kBAAC,EAAD,MAGPG,EACO,kBAAC,EAAD,MAGJ,kBAAC6C,EAAD,iBAAUnC,KAAKC,MAAf,CAAsBmC,KAAMA,SAnD3C,GAAqB5B,cCgBV8B,EAlBU,SAACC,GAAD,OAAuB,SAACC,GAC7C,OAAO,SAACvC,GACJ,OACI,kBAACkB,EAAD,MAEQ,SAAClC,GACG,IAAMwD,EAAeF,EAAkBtD,GAEvC,OACI,kBAACuD,EAAD,iBAAavC,EAAWwC,UCSrCH,KAPW,SAACrD,GACvB,MAAO,CACH4C,QAAS5C,EAAa1C,UACtBuF,YAAa7C,EAAa5B,kBAInBiF,EAjBO,SAACrC,GACnB,OACI,kBAAC,EAAgBA,EACb,kBAAC,EAAD,CAAQqB,MAAM,SAASC,MAAM,YAC7B,kBAAC,EAAD,CAAQD,MAAM,WAAWC,MAAM,eAC/B,kBAAC,EAAD,CAAQD,MAAM,YAAYC,MAAM,oBCY7Be,KAPW,SAACrD,GACvB,MAAO,CACH4C,QAAS5C,EAAarC,UACtBkF,YAAa7C,EAAa1B,kBAInB+E,EAjBO,SAACrC,GACnB,OACI,kBAAC,EAAgBA,EACb,kBAAC,EAAD,CAAQqB,MAAM,aAAaC,MAAM,eACjC,kBAAC,EAAD,CAAQD,MAAM,iBAAiBC,MAAM,qBACrC,kBAAC,EAAD,CAAQD,MAAM,WAAWC,MAAM,kBCY5Be,KAPW,SAACrD,GACvB,MAAO,CACH4C,QAAS5C,EAAajC,YACtB8E,YAAa7C,EAAa3B,oBAInBgF,EAjBS,SAACrC,GACrB,OACI,kBAAC,EAAgBA,EACb,kBAAC,EAAD,CAAQqB,MAAM,QAAQC,MAAM,WAC5B,kBAAC,EAAD,CAAQD,MAAM,SAASC,MAAM,YAC7B,kBAAC,EAAD,CAAQD,MAAM,gBAAgBC,MAAM,cCFxCpF,G,OAAiB,IAAIZ,GAArBY,cAEFuG,EAAW,SAACzC,GAAW,IAEjBmC,EAAgDnC,EAAhDmC,KAAMO,EAA0C1C,EAA1C0C,eAA0BC,EAAgB3C,EAA1Ba,SAExB+B,EAAQT,EAAK/F,KAAI,SAACc,GAAU,IACtBX,EAAOW,EAAPX,GACF+E,EAAQqB,EAAYzF,GAE1B,OACI,wBAAI9B,UAAU,kBACVyH,IAAKtG,EACLuG,QAAS,kBAAMJ,EAAenG,KAC7B+E,MAKb,OACI,wBAAIlG,UAAU,wBACTwH,IAKbH,EAASjC,aAAe,CACpBkC,eAAgB,cASLT,ICzCAQ,EDyCAR,EAASQ,EAAUvG,GEvC5B6G,EAAoB,SAACC,GAAD,OAAQ,SAACT,GAC/B,OAAO,SAACvC,GACJ,OACI,kBAACuC,EAAYvC,EACRgD,MAMXC,EAAa,SAAC,GAAD,IAAG1F,EAAH,EAAGA,KAAH,OAAc,8BAAOA,IAoBlC2F,EAAab,GAlBa,SAACrD,GAC7B,MAAO,CACH4C,QAAS5C,EAAa9C,gBAgBXmG,CACfJ,EACIc,EAAkBE,EAAlBF,CACIN,KAENU,EAAad,GAjBa,SAACrD,GAC7B,MAAO,CACH4C,QAAS5C,EAAavC,iBAeX4F,CACfJ,EACIc,EAAkBE,EAAlBF,CACIN,KAENW,EAAef,GAhBa,SAACrD,GAC/B,MAAO,CACH4C,QAAS5C,EAAanC,mBAcTwF,CACjBJ,EACIc,EAAkBE,EAAlBF,CACIN,K,QClCGY,G,MAAAA,aATI,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACjB,OACI,kBAACJ,EAAD,CACIR,eAAgB,SAACf,GACb2B,EAAQC,KAAK5B,UCKd0B,eATK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,kBAACH,EAAD,CACIT,eAAgB,SAACf,GACb2B,EAAQC,KAAK5B,SCKd0B,eATO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpB,OACI,kBAACF,EAAD,CACIV,eAAgB,SAACf,GACb2B,EAAQC,KAAK5B,SCUd6B,EAfI,SAAC,GAEhB,OAFmC,EAAjBC,WAIV,yBAAKrI,UAAU,mBACX,yBAAKA,UAAU,yBACX,iEAMT,kBAAC,IAAD,CAAUC,GAAG,YCQTqI,EApBG,SAAC,GAA6B,IAA3BD,EAA0B,EAA1BA,WAAYE,EAAc,EAAdA,QAE7B,OAAIF,EACO,kBAAC,IAAD,CAAUpI,GAAG,MAIpB,yBAAKD,UAAU,mBACX,yBAAKA,UAAU,yBACX,wDACA,4BACIA,UAAU,kBACV0H,QAASa,GAFb,YCXDC,E,2MCqBX5E,aAAe,IAAI1D,E,EAEnB2D,MAAQ,CACJwE,YAAY,G,EAGhBE,QAAU,WACN,EAAKvE,SAAS,CACVqE,YAAY,K,wEAIV,IAAD,OAEGA,EAAe1D,KAAKd,MAApBwE,WAER,OACI,kBAAC,EAAD,KACI,kBAACzC,EAAD,CAAsB6C,MAAO9D,KAAKf,cAC9B,kBAAC,IAAD,KAEI,yBAAK5D,UAAU,cAEX,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,IAAD,KAGI,kBAAC,IAAD,CAAO0I,KAAK,IACRC,OAAQ,kBAAM,kDACdC,OAAK,IACT,kBAAC,IAAD,CAAOF,KAAK,UAAUE,OAAK,EAACC,UAAWC,IACvC,kBAAC,IAAD,CAAOJ,KAAK,WAAWE,OAAK,EAACC,UAAWE,IACxC,kBAAC,IAAD,CAAOL,KAAK,aAAaE,OAAK,EAACC,UAAWG,IAG1C,kBAAC,IAAD,CAAON,KAAK,cACRC,OAAQ,YAAgB,IACZxH,EADW,EAAZY,MACckH,OAAb9H,GACR,OAAO,kBAAC,EAAD,CAAeoF,OAAQpF,OAGtC,kBAAC,IAAD,CAAOuH,KAAK,eACRC,OAAQ,YAAgB,IACZxH,EADW,EAAZY,MACckH,OAAb9H,GACR,OAAO,kBAAC,EAAD,CAAeoF,OAAQpF,OAGtC,kBAAC,IAAD,CAAOuH,KAAK,iBACRC,OAAQ,YAAgB,IACZxH,EADW,EAAZY,MACckH,OAAb9H,GACR,OAAO,kBAAC,EAAD,CAAiBoF,OAAQpF,OAIxC,kBAAC,IAAD,CAAOuH,KAAK,SACRC,OAAQ,kBACJ,kBAAC,EAAD,CACIN,WAAYA,EACZE,QAAS,EAAKA,aAG1B,kBAAC,IAAD,CAAOG,KAAK,UACRC,OAAQ,kBACJ,kBAAC,EAAD,CAAYN,WAAYA,OAIhC,kBAAC,IAAD,CAAOM,OAAQ,kBACX,qE,GAvEHxD,aClBjC+D,IAASP,OAAO,kBAAC,EAAD,MACZQ,SAASC,eAAe,W","file":"static/js/main.5935d8e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.eed4945c.png\";","import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header d-flex\">\r\n            <h3>\r\n                <Link to=\"/\">\r\n                    Star DB\r\n                </Link>\r\n            </h3>\r\n            <ul className=\"d-flex\">\r\n                <li>\r\n                    <Link to=\"/people/\">People</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/planets/\">Planets</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/starships/\">Starships</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/login\">Login</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/secret\">Secret</Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","export default class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.co/api';\r\n    _imageBase = 'https://starwars-visualguide.com/assets/img';\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch  ${url}`\r\n                + `, received ${res.status}`)\r\n        };\r\n        return await res.json();\r\n    };\r\n\r\n    // People\r\n    getAllPeople = async () => {\r\n        const res = await this.getResource(`/people/`);\r\n        return res.results\r\n            .map(this._transformPerson);\r\n    };\r\n\r\n    getPerson = async (id) => {\r\n        const person = await this.getResource(`/people/${id}/`);\r\n        return this._transformPerson(person);\r\n    };\r\n\r\n    // Planets\r\n    getAllPlanets = async () => {\r\n        const res = await this.getResource(`/planets/`);\r\n        return res.results\r\n            .map(this._transformPlanet);\r\n    };\r\n\r\n    getPlanet = async (id) => {\r\n        const planet = await this.getResource(`/planets/${id}/`);\r\n        return this._transformPlanet(planet);\r\n    };\r\n\r\n    // Starships\r\n    getAllStarships = async () => {\r\n        const res = await this.getResource(`/starships/`);\r\n        return res.results\r\n            .map(this._transformStarship);\r\n    };\r\n\r\n    getStarship = async (id) => {\r\n        const starship = await this.getResource(`/starships/${id}/`);\r\n        return this._transformStarship(starship);\r\n    };\r\n\r\n    // get ID\r\n    _extractId = (item) => {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return item.url.match(idRegExp)[1];\r\n    };\r\n\r\n    // Images\r\n    getPersonImage = ({ id }) => {\r\n        return `${this._imageBase}/characters/${id}.jpg`;\r\n    };\r\n    getStarshipImage = ({ id }) => {\r\n        return `${this._imageBase}/starships/${id}.jpg`;\r\n    };\r\n    getPlanetImage = ({ id }) => {\r\n        return `${this._imageBase}/planets/${id}.jpg`;\r\n    };\r\n\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        };\r\n    };\r\n\r\n    _transformStarship = (starship) => {\r\n        return {\r\n            id: this._extractId(starship),\r\n            name: starship.name,\r\n            model: starship.model,\r\n            manufacturer: starship.manufacturer,\r\n            costInCredits: starship.cost_in_credits,\r\n            length: starship.length,\r\n            crew: starship.crew,\r\n            passengers: starship.passengers,\r\n            cargoCapacity: starship.cargo_capacity\r\n        };\r\n    };\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color\r\n        };\r\n    };\r\n};","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"center loadingio-spinner-dual-ball-cnsf0j7temb\"><div className=\"ldio-qe5xxwb082\">\r\n            <div></div><div></div><div></div>\r\n        </div></div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\nimport './error-indicator.css';\r\nimport icon from './error.png'\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <img src={icon} alt=\"planet was not found\" className=\"image\"></img>\r\n            <span className=\"boom\">BOOM!</span>\r\n            <span>\r\n                something has gone terribly wrong\r\n            </span>\r\n            <span>\r\n                (but we already sent droids to fix it)\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport Spinner from '../spinner/index'\r\nimport ErrorIndicator from '../error-indicator/index'\r\n\r\nimport './random-planet.css';\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n    static defaultProps = {\r\n        updateInterval: 10000\r\n    };\r\n\r\n    static propTypes = {\r\n        updateInterval: PropTypes.number\r\n    };\r\n\r\n    swapiService = new SwapiService();\r\n\r\n    state = {\r\n        planet: {},\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n        const { updateInterval } = this.props;\r\n\r\n        this.updatePlanet();\r\n        this.interval = setInterval(this.updatePlanet, updateInterval)\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval)\r\n    };\r\n\r\n    onPlanetLoaded = (planet) => {\r\n        this.setState({\r\n            planet,\r\n            loading: false,\r\n            error: false\r\n        });\r\n    };\r\n\r\n    onError = (err) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        });\r\n    };\r\n\r\n    updatePlanet = () => {\r\n        const id = Math.floor(Math.random() * 25) + 2;\r\n        this.swapiService\r\n            .getPlanet(id)\r\n            .then(this.onPlanetLoaded)\r\n            .catch(this.onError);\r\n    };\r\n\r\n    render() {\r\n        const { planet, loading, error } = this.state;\r\n\r\n        // What to show\r\n        const errorMessage = error ? <ErrorIndicator /> : null;\r\n        const spinner = loading ? <Spinner /> : null;\r\n\r\n        const hasData = !(loading || error);\r\n        const content = hasData ? <PlanetView planet={planet} /> : null;\r\n\r\n        return (\r\n            <div className=\"random-planet jumbotron rounded\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst PlanetView = ({ planet }) => {\r\n\r\n    const { id, name, population,\r\n        rotationPeriod, diameter,\r\n    } = planet;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img className=\"planet-image\"\r\n                src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"...\" />\r\n            <div>\r\n                <h4>{name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population:</span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period:</span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter:</span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;","import ErrorBoundary from './error-boundary';\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport ErrorIndicator from '../error-indicator/index';\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    state = {\r\n        hasError: false\r\n    };\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    };\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />\r\n        };\r\n\r\n        return this.props.children;\r\n    };\r\n};","import React from 'react';\r\n\r\nconst {\r\n    Provider: SwapiServiceProvider,\r\n    Consumer: SwapiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceProvider,\r\n    SwapiServiceConsumer\r\n};","import React, { Component } from 'react';\r\n\r\nimport './item-details.css';\r\n\r\nconst Record = ({ item, field, label }) => {\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <span className=\"term\">{label}</span>\r\n            <span>{item[field]}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport {\r\n    Record\r\n};\r\n\r\nexport default class ItemDetails extends Component {\r\n\r\n    state = {\r\n        item: null,\r\n        image: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.itemId !== prevProps.itemId) {\r\n            this.updateItem()\r\n        };\r\n    };\r\n\r\n    updateItem() {\r\n        const { itemId, getData, getImageUrl } = this.props;\r\n        if (!itemId) {\r\n            return;\r\n        };\r\n\r\n        getData(itemId)\r\n            .then((item) => {\r\n                this.setState({\r\n                    item,\r\n                    image: getImageUrl(item)\r\n                });\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { item, image } = this.state;\r\n        if (!item) {\r\n            return <span className=\"text\">Select a item from a list</span>\r\n        };\r\n\r\n        const { name } = this.state.item;\r\n\r\n        return (\r\n            <div className=\"item-details card\">\r\n                <img className=\"item-image\"\r\n                    src={image}\r\n                    alt=\"item\" />\r\n\r\n                <div className=\"card-body\">\r\n                    <h4>{name} {this.props.itemId}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            React.Children.map(this.props.children, (child) => {\r\n                                return React.cloneElement(child, { item });\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};","import ItemDetails, { Record } from './item-details';\r\n\r\nexport default ItemDetails;\r\n\r\nexport { Record };","import React, { Component } from 'react';\r\nimport Spinner from '../spinner/index';\r\nimport ErrorIndicator from '../error-indicator/index';\r\n\r\nconst withData = (View) => {\r\n    return class extends Component {\r\n\r\n        state = {\r\n            data: null,\r\n            loading: true,\r\n            error: false\r\n        };\r\n\r\n        componentDidUpdate(prevProps){\r\n            if (this.props.getData !== prevProps.getData){\r\n                this.update();\r\n            };\r\n        };\r\n\r\n        componentDidMount() {\r\n            this.update();\r\n        };\r\n\r\n        update() {\r\n            this.setState({\r\n                loading: true,\r\n                error: false\r\n            })\r\n\r\n            this.props.getData()\r\n                .then((data) => {\r\n                    this.setState({\r\n                        data,\r\n                        loading: false\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    this.setState({\r\n                        error: true,\r\n                        loading: false\r\n                    })\r\n                })\r\n        };\r\n\r\n        render() {\r\n\r\n            const { data, loading, error } = this.state;\r\n\r\n            if (loading) {\r\n                return <Spinner />;\r\n            };\r\n\r\n            if (error) {\r\n                return <ErrorIndicator />\r\n            };\r\n\r\n            return <View {...this.props} data={data} />\r\n        };\r\n    };\r\n};\r\n\r\nexport default withData;","import React from 'react';\r\nimport { SwapiServiceConsumer } from '../swapi-service-context/index';\r\n\r\nconst withSwapiService = (mapMethodsToProps) => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <SwapiServiceConsumer>\r\n                {\r\n                    (swapiService) => {\r\n                        const serviceProps = mapMethodsToProps(swapiService);\r\n\r\n                        return (\r\n                            <Wrapped {...props} {...serviceProps} />\r\n                        )\r\n                    }\r\n                }\r\n            </SwapiServiceConsumer>\r\n        );\r\n    };\r\n};\r\n\r\nexport default withSwapiService;","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from '../hoc-helper/index';\r\n\r\nconst PersonDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props} >\r\n            <Record field=\"gender\" label=\"Gender:\" />\r\n            <Record field=\"eyeColor\" label=\"Eye Color:\" />\r\n            <Record field=\"birthYear\" label=\"Birth Year:\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getPerson,\r\n        getImageUrl: swapiService.getPersonImage\r\n    };\r\n};\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from '../hoc-helper/index';\r\n\r\nconst PlanetDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}>\r\n            <Record field=\"population\" label=\"Population\" />\r\n            <Record field=\"rotationPeriod\" label=\"Rotation Period:\" />\r\n            <Record field=\"diameter\" label=\"Diameter:\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getPlanet,\r\n        getImageUrl: swapiService.getPlanetImage\r\n    };\r\n};\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from '../hoc-helper/index';\r\n\r\nconst StarshipDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}>\r\n            <Record field=\"model\" label=\"Model:\" />\r\n            <Record field=\"length\" label=\"Length:\" />\r\n            <Record field=\"costInCredits\" label=\"Cost:\" />\r\n        </ItemDetails>\r\n    )\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getStarship,\r\n        getImageUrl: swapiService.getStarshipImage\r\n    };\r\n};\r\n\r\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);","import React from 'react';\r\nimport PropTypes, { arrayOf } from 'prop-types';\r\nimport { withData } from '../hoc-helper/'\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\nimport './item-list.css';\r\n\r\nconst { getAllPeople } = new SwapiService();\r\n\r\nconst ItemList = (props) => {\r\n\r\n    const { data, onItemSelected, children: renderLabel } = props;\r\n\r\n    const items = data.map((item) => {\r\n        const { id } = item;\r\n        const label = renderLabel(item);\r\n\r\n        return (\r\n            <li className=\"list-group-item\"\r\n                key={id}\r\n                onClick={() => onItemSelected(id)}>\r\n                {label}\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"item-list list-group\">\r\n            {items}\r\n        </ul>\r\n    );\r\n};\r\n\r\nItemList.defaultProps = {\r\n    onItemSelected: () => { }\r\n};\r\n\r\nItemList.propTypes = {\r\n    onItemSelected: PropTypes.func,\r\n    data: arrayOf(PropTypes.object).isRequired,\r\n    children: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withData(ItemList, getAllPeople);","import ItemList from './item-list';\r\n\r\nexport default ItemList;","import React from 'react';\r\nimport ItemList from '../item-list/index';\r\nimport { withData, withSwapiService } from '../hoc-helper/index';\r\n\r\nconst withChildFunction = (fn) => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <Wrapped {...props}>\r\n                {fn}\r\n            </Wrapped>\r\n        );\r\n    };\r\n};\r\n\r\nconst renderName = ({ name }) => <span>{name}</span>;\r\n\r\nconst mapPersonMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPeople\r\n    };\r\n};\r\n\r\nconst mapPlanetMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPlanets\r\n    };\r\n};\r\n\r\nconst mapStarshipMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllStarships\r\n    };\r\n};\r\n\r\nconst PersonList = withSwapiService(mapPersonMethodsToProps)(\r\n    withData(\r\n        withChildFunction(renderName)(\r\n            ItemList)));\r\n\r\nconst PlanetList = withSwapiService(mapPlanetMethodsToProps)(\r\n    withData(\r\n        withChildFunction(renderName)(\r\n            ItemList)));\r\n\r\nconst StarshipList = withSwapiService(mapStarshipMethodsToProps)(\r\n    withData(\r\n        withChildFunction(renderName)(\r\n            ItemList)));\r\n\r\nexport {\r\n    PersonList,\r\n    PlanetList,\r\n    StarshipList\r\n};","import React from 'react';\r\nimport { PersonList } from '../sw-components/index';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst PeoplePage = ({history}) => {\r\n    return (\r\n        <PersonList\r\n            onItemSelected={(itemId) => {\r\n                history.push(itemId);\r\n            }} />\r\n    );\r\n};\r\n\r\nexport default withRouter(PeoplePage);","import React from 'react';\r\nimport { PlanetList } from '../sw-components/index';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst PlanetsPage = ({ history }) => {\r\n    return (\r\n        <PlanetList\r\n            onItemSelected={(itemId) => {\r\n                history.push(itemId);\r\n            }} />\r\n    );\r\n};\r\n\r\nexport default withRouter(PlanetsPage);","import React from 'react';\r\nimport { StarshipList } from '../sw-components/index';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst StarshipsPage = ({history}) => {\r\n    return (\r\n        <StarshipList\r\n            onItemSelected={(itemId) => {\r\n                history.push(itemId);\r\n            }} /> \r\n    );\r\n};\r\n\r\nexport default withRouter(StarshipsPage);","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst SecretPage = ({ isLoggedIn }) => {\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"jumbotron text-center\">\r\n                    <h3>This page is full of secrets!!!</h3>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default SecretPage;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = ({ isLoggedIn, onLogin }) => {\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    };\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"jumbotron text-center\">\r\n                <p>Login to see secret page!</p>\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={onLogin} >\r\n                    Login\r\n            </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport Header from '../header';\r\nimport RandomPlanet from '../random-planet';\r\nimport ErrorBoundary from '../error-boundary/index';\r\nimport SwapiService from '../../services/swapi-service'\r\nimport { SwapiServiceProvider } from '../swapi-service-context/index';\r\nimport { PersonDetails, PlanetDetails, StarshipDetails } from '../sw-components/index';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport './app.css'\r\n\r\nimport {\r\n    PeoplePage,\r\n    PlanetsPage,\r\n    StarshipsPage,\r\n    LoginPage,\r\n    SecretPage\r\n} from '../pages/index';\r\n\r\n\r\nexport default class App extends Component {\r\n    swapiService = new SwapiService();\r\n\r\n    state = {\r\n        isLoggedIn: false\r\n    };\r\n\r\n    onLogin = () => {\r\n        this.setState({\r\n            isLoggedIn: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const { isLoggedIn } = this.state;\r\n\r\n        return (\r\n            <ErrorBoundary>\r\n                <SwapiServiceProvider value={this.swapiService}>\r\n                    <Router>\r\n\r\n                        <div className=\"stardb-app\">\r\n\r\n                            <Header />\r\n                            <RandomPlanet />\r\n\r\n                            <Switch>\r\n\r\n                                {/* Item Pages */}\r\n                                <Route path=\"/\"\r\n                                    render={() => <h2>Welcome to StarDB</h2>}\r\n                                    exact />\r\n                                <Route path=\"/people\" exact component={PeoplePage} />\r\n                                <Route path=\"/planets\" exact component={PlanetsPage} />\r\n                                <Route path=\"/starships\" exact component={StarshipsPage} />\r\n\r\n                                {/* Item Details */}\r\n                                <Route path=\"/people/:id\"\r\n                                    render={({ match }) => {\r\n                                        const { id } = match.params;\r\n                                        return <PersonDetails itemId={id} />\r\n                                    }} />\r\n\r\n                                <Route path=\"/planets/:id\"\r\n                                    render={({ match }) => {\r\n                                        const { id } = match.params;\r\n                                        return <PlanetDetails itemId={id} />\r\n                                    }} />\r\n\r\n                                <Route path=\"/starships/:id\"\r\n                                    render={({ match }) => {\r\n                                        const { id } = match.params;\r\n                                        return <StarshipDetails itemId={id} />\r\n                                    }} />\r\n\r\n                                {/* Login and Secret pages */}\r\n                                <Route path=\"/login\"\r\n                                    render={() => (\r\n                                        <LoginPage\r\n                                            isLoggedIn={isLoggedIn}\r\n                                            onLogin={this.onLogin} />\r\n                                    )} />\r\n\r\n                                <Route path=\"/secret\"\r\n                                    render={() => (\r\n                                        <SecretPage isLoggedIn={isLoggedIn} />\r\n                                    )} />\r\n\r\n                                {/* For no */}\r\n                                <Route render={() =>\r\n                                    <h2>404 Error: Page not found</h2>\r\n                                } />\r\n                            </Switch>\r\n                        </div>\r\n\r\n                    </Router>\r\n                </SwapiServiceProvider>\r\n            </ErrorBoundary>\r\n        );\r\n    };\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));"],"sourceRoot":""}